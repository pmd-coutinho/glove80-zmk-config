/*    KEY POSITION Numbers for Zaphod
 ╭────────────────────╮ ╭────────────────────╮
 │  0   1   2   3   4 │ │  5   6   7   8   9 │
 │ 10  11  12  13  14 │ │ 15  16  17  18  19 |
 | 20  21  22  23  24 │ │ 25  26  27  28  29 |
 ╰───────────╮ 30  31 | | 32  33  ╭──────────╯
             ╰────────╯ ╰─────────╯
*/
/*    KEY POSITION Names
╭─────────────────────╮ ╭─────────────────────╮
│ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │
│ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │
│ LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 │
╰───────────╮ LH2 LH1 | | RH1 RH2 ╭───────────╯
            ╰─────────╯ ╰─────────╯
*/
/*  Base (alpha) Layer  Hands Down Vibranium
        Building for a 34 key board
    ╭─────────────────╮ ╭─────────────────╮
    │  X  W  M  G  J  │ │ #$  .: '[ "]  B │
    │  S  C  N  T  K  | | ,;   A  E  I  H │
    │  V  P  L  D  /* │ │ -+   U  O  Y  F │
    ╰───────╮  BSP R  │ │ SPC RET  ╭──────╯
            ╰─────────╯ ╰──────────╯
*/


behaviors {
      skapp: sticky_key_app_switcher {
        compatible = "zmk,behavior-sticky-key";
        label = "SK_APP_SWITCHER";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <900>;
      };
        mm_bspc_del: mm_backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&lt l_fun BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lk: lk {
            compatible = "zmk,behavior-hold-tap";
            label = "lk";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        lk_qu: lk_qu {
            compatible = "zmk,behavior-hold-tap";
            label = "lk_qu";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&Qu>;
        };

        lk_E_accent: lk_E_accent { // ´, é on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_E_accent";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeEaccent>, <&kp>;
        };
        lk_E_grave: lk_E_grave { // `, è on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_E_grave";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeEgrave>, <&kp>;
        };
        lk_E_acute: lk_E_acute { // ˆ, ê on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_E_acute";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeEacute>, <&kp>;
        };
        lk_O_macron: lk_O_macron { // ¯, ō on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_O_macron";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeOmacron>, <&kp>;
        };
        lk_A_ring: lk_A_ring { // ˚, å on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_A_ring";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeAring>, <&kp>;
        };
        lk_U_umlaut: lk_U_umlaut { // ¨, ü on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_U_umlaut";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeUumlaut>, <&kp>;
        };
        lk_C_cedille: lk_C_cedille { // ¸, ç on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_C_cedille";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeCedille>, <&kp>;
        };


        lk_Japan: lk_Japan { // Japan on tap, Japanese on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_Japan";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeJapanese>, <&typeJapan>;
        };
        lk_th: lk_th { // Th on tap, tion on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_th";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            quick-tap-ms = <90>;
//            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&tion>, <&Th>;
        };
        lk_sh: lk_sh { // Sh on tap, sion on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_sh";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            quick-tap-ms = <90>;
//            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&sion>, <&Sh>;
        };
        lk_gh: lk_gh { // Gh on tap, Ght on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_gh";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            quick-tap-ms = <90>;
//            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&ght>, <&Gh>;
        };
        lk_quote: lk_quote { // " on tap, “” on "linger" (curly quotes)
            compatible = "zmk,behavior-hold-tap";
            label = "lk_quote";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&pairDquo>, <&kp>;
        };
        lk_par: lk_par { // ( on tap, () on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_par";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&pairPar>, <&kp>;
        };
        lk_bkt: lk_bkt { // [ on tap, [] on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_bkt";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&pairBkt>, <&kp>;
        };
        lk_brc: lk_brc { // { on tap, {} on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_brc";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&pairBrc>, <&kp>;
        };
        lk_ltgt: lk_ltgt { // < on tap, <|> on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_ltgt";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&pairLtGt>, <&kp>;
        };

        CmmaSemi: CmmaSemi {
            compatible = "zmk,behavior-mod-morph";
            label = "comma_semi";
            #binding-cells = <0>;
            bindings = <&kp CMMA>, <&typeSemi>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        DotColn: DotColn {
            compatible = "zmk,behavior-mod-morph";
            label = "DotColn";
            #binding-cells = <0>;
            bindings = <&dot_ak>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        SlshStar: SlshStar {
            compatible = "zmk,behavior-mod-morph";
            label = "SlshStar";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp STAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        HashDllr: HashDllr {
            compatible = "zmk,behavior-mod-morph";
            label = "HashDllr";
            #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp DLLR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        MinusPlus: MinusPlus {
            compatible = "zmk,behavior-mod-morph";
            label = "MinusPlus";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        DqtLbkt: DqtLbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "DqtLbkt";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp LBKT>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        DqtRbkt: DqtRbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "DqtRbkt";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp RBKT>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        SqtLbkt: SqtLbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "SqtLbkt";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp LBKT>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        SqtRbkt: SqtRbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "SqtRbkt";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp RBKT>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        BspcDel: Bspc_Del {
            compatible = "zmk,behavior-mod-morph";
            label = "Bspc_Del";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
};